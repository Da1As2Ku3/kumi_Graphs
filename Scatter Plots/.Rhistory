sp <- ggplot(heightweight, aes(x=ageYear, y=heightIn)) + geom_point(colour="grey40")
predictvals <- function(model, xvar, yvar, xrange=NULL, samples=100, ...) {
# If xrange isn't passed in, determine xrange from the models.
# Different ways of extracting the x range, depending on model type
if (is.null(xrange)) {
if (any(class(model) %in% c("lm", "glm")))
xrange <- range(model$model[[xvar]])
else if (any(class(model) %in% "loess"))
xrange <- range(model$x)
}
newdata <- data.frame(x = seq(xrange[1], xrange[2], length.out = samples))
names(newdata) <- xvar
newdata[[yvar]] <- predict(model, newdata = newdata, ...)
newdata
}
modlinear <- lm(heightIn ~ ageYear, heightweight)
modloess <- loess(heightIn ~ ageYear, heightweight)
#Then we can call predictvals() on each model, and pass the resulting data frames to geom_line()
lm_predicted <- predictvals(modlinear, "ageYear", "heightIn")
loess_predicted <- predictvals(modloess, "ageYear", "heightIn")
sp + geom_line(data=lm_predicted, colour="red", size=.8) + geom_line(data=loess_predicted, colour="blue", size=.8)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
library(MASS) # For the data set
b <- biopsy
b$classn[b$class=="benign"] <- 0
b$classn[b$class=="malignant"] <- 1
#Next, weâ€™ll perform the logistic regression:
fitlogistic <- glm(classn ~ V1, b, family=binomial)
# Get predicted values
glm_predicted <- predictvals(fitlogistic, "V1", "classn", type="response")
ggplot(b, aes(x=V1, y=classn)) +
geom_point(position=position_jitter(width=.3, height=.08), alpha=0.4,
shape=21, size=1.5) + geom_line(data=glm_predicted, colour="#1177FF", size=1)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
library(heightweight)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(heightweight)
make_model <- function(data) {
lm(heightIn ~ ageYear, data)
}
library(plyr)
models <- dlply(heightweight, "sex", .fun = make_model)
# Print out the list of two lm objects, f and m
models
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(heightweight)
make_model <- function(data) {
lm(heightIn ~ ageYear, data)
}
library(plyr)
models <- dlply(heightweight, "sex", .fun = make_model)
predvals <- ldply(models, .fun=predictvals, xvar="ageYear", yvar="heightIn")
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(heightweight)
make_model <- function(data) {
lm(heightIn ~ ageYear, data)
}
library(plyr)
models <- dlply(heightweight, "sex", .fun = make_model)
predictvals <- function(model, xvar, yvar, xrange=NULL, samples=100, ...) {
# If xrange isn't passed in, determine xrange from the models.
# Different ways of extracting the x range, depending on model type
if (is.null(xrange)) {
if (any(class(model) %in% c("lm", "glm")))
xrange <- range(model$model[[xvar]])
else if (any(class(model) %in% "loess"))
xrange <- range(model$x)
}
newdata <- data.frame(x = seq(xrange[1], xrange[2], length.out = samples))
names(newdata) <- xvar
newdata[[yvar]] <- predict(model, newdata = newdata, ...)
newdata
}
predvals <- ldply(models, .fun=predictvals, xvar="ageYear", yvar="heightIn")
predvals
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(heightweight)
make_model <- function(data) {
lm(heightIn ~ ageYear, data)
}
library(plyr)
models <- dlply(heightweight, "sex", .fun = make_model)
predictvals <- function(model, xvar, yvar, xrange=NULL, samples=100, ...) {
# If xrange isn't passed in, determine xrange from the models.
# Different ways of extracting the x range, depending on model type
if (is.null(xrange)) {
if (any(class(model) %in% c("lm", "glm")))
xrange <- range(model$model[[xvar]])
else if (any(class(model) %in% "loess"))
xrange <- range(model$x)
}
newdata <- data.frame(x = seq(xrange[1], xrange[2], length.out = samples))
names(newdata) <- xvar
newdata[[yvar]] <- predict(model, newdata = newdata, ...)
newdata
}
predvals <- ldply(models, .fun=predictvals, xvar="ageYear", yvar="heightIn")
head(predvals)
#Finally, we can plot the data with the predicted values
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) +
geom_point() + geom_line(data=predvals)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(heightweight)
make_model <- function(data) {
lm(heightIn ~ ageYear, data)
}
library(plyr)
models <- dlply(heightweight, "sex", .fun = make_model)
predictvals <- function(model, xvar, yvar, xrange=NULL, samples=100, ...) {
# If xrange isn't passed in, determine xrange from the models.
# Different ways of extracting the x range, depending on model type
if (is.null(xrange)) {
if (any(class(model) %in% c("lm", "glm")))
xrange <- range(model$model[[xvar]])
else if (any(class(model) %in% "loess"))
xrange <- range(model$x)
}
newdata <- data.frame(x = seq(xrange[1], xrange[2], length.out = samples))
names(newdata) <- xvar
newdata[[yvar]] <- predict(model, newdata = newdata, ...)
newdata
}
predvals <- ldply(models, .fun=predictvals, xvar="ageYear", yvar="heightIn",
xrange=range(heightweight$ageYear))
#Then we can plot it, the same as we did before:
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) +
geom_point() + geom_line(data=predvals)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(heightweight)
model <- lm(heightIn ~ ageYear, heightweight)
summary(model)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(heightweight)
# First generate prediction data
pred <- predictvals(model, "ageYear", "heightIn")
sp <- ggplot(heightweight, aes(x=ageYear, y=heightIn)) + geom_point() + geom_line(data=pred)
sp + annotate("text", label="r^2=0.42", x=16.5, y=52)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(heightweight)
sp + annotate("text", label="r^2 == 0.42", parse = TRUE, x=16.5, y=52)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(heightweight)
eqn <- as.character(as.expression(
substitute(italic(y) == a + b * italic(x) * "," ~~ italic(r)^2 ~ "=" ~ r2,
list(a = format(coef(model)[1], digits=3),
b = format(coef(model)[2], digits=3),
r2 = format(summary(model)$r.squared, digits=2)
))))
eqn
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(heightweight)
sp <- ggplot(heightweight, aes(x=ageYear, y=heightIn)) + geom_point() + geom_line(data=pred)
sp + annotate("text", label=eqn, parse=TRUE, x=Inf, y=-Inf, hjust=1.1, vjust=-.5)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(faithful)
ggplot(faithful, aes(x=eruptions, y=waiting)) + geom_point() + geom_rug()
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(faithful)
ggplot(faithful, aes(x=eruptions, y=waiting)) + geom_point() +
geom_rug(position="jitter", size=.2)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
subset(countries, Year==2009 & healthexp>2000)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
sp <- ggplot(subset(countries, Year==2009 & healthexp>2000),
aes(x=healthexp, y=infmortality)) + geom_point()
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
sp <- ggplot(subset(countries, Year==2009 & healthexp>2000),
aes(x=healthexp, y=infmortality)) + geom_point()
sp + annotate("text", x=4350, y=5.4, label="Canada") +
annotate("text", x=7400, y=6.8, label="USA")
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
sp <- ggplot(subset(countries, Year==2009 & healthexp>2000),
aes(x=healthexp, y=infmortality)) + geom_point()
g1<-sp + annotate("text", x=4350, y=5.4, label="Canada") +
annotate("text", x=7400, y=6.8, label="USA")
ggplotly(g1)
g2<-sp + geom_text(aes(label=Name), size=4)
ggplotly(g2)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
sp <- ggplot(subset(countries, Year==2009 & healthexp>2000),
aes(x=healthexp, y=infmortality)) + geom_point()
g1<-sp + annotate("text", x=4350, y=5.4, label="Canada") +
annotate("text", x=7400, y=6.8, label="USA")
ggplotly(g1)
g2<-sp + geom_text(aes(label=Name), size=4)
ggplotly(g2)
grid.arrange(g1,g2,ncol=2)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
sp <- ggplot(subset(countries, Year==2009 & healthexp>2000),
aes(x=healthexp, y=infmortality)) + geom_point()
g1<-sp + geom_text(aes(label=Name), size=4, vjust=0)
# Add a little extra to y
g2<-sp + geom_text(aes(y=infmortality+.1, label=Name), size=4, vjust=0)
grid.arrange(g1,g2,ncol=2)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
sp <- ggplot(subset(countries, Year==2009 & healthexp>2000),
aes(x=healthexp, y=infmortality)) + geom_point()
sp + geom_text(aes(label=Name), size=4, hjust=0)
sp + geom_text(aes(x=healthexp+100, label=Name), size=4, hjust=0)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
sp <- ggplot(subset(countries, Year==2009 & healthexp>2000),
aes(x=healthexp, y=infmortality)) + geom_point()
cdat <- subset(countries, Year==2009 & healthexp>2000)
cdat$Name1 <- cdat$Name
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
idx <- cdat$Name1 %in% c("Canada", "Ireland", "United Kingdom", "United States","New Zealand", "Iceland", "Japan", "Luxembourg","Netherlands", "Switzerland")
idx
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
idx <- cdat$Name1 %in% c("Canada", "Ireland", "United Kingdom", "United States","New Zealand", "Iceland", "Japan", "Luxembourg","Netherlands", "Switzerland")
idx
#Then weâ€™ll use that Boolean vector to overwrite all the other entries in Name1 with NA.
cdat$Name1[!idx] <- NA
#This is what the result looks like
cdat
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
idx <- cdat$Name1 %in% c("Canada", "Ireland", "United Kingdom", "United States","New Zealand", "Iceland", "Japan", "Luxembourg","Netherlands", "Switzerland")
idx
#Then weâ€™ll use that Boolean vector to overwrite all the other entries in Name1 with NA.
cdat$Name1[!idx] <- NA
#This is what the result looks like
cdat
#Now we can make the plot (Figure 5-33). This time, weâ€™ll also expand the x range so that the text will fit
ggplot(cdat, aes(x=healthexp, y=infmortality)) +geom_point() + geom_text(aes(x=healthexp+100, label=Name1), size=4, hjust=0) + xlim(2000, 10000)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
cdat <- subset(countries, Year==2009 &
Name %in% c("Canada", "Ireland", "United Kingdom", "United States",
"New Zealand", "Iceland", "Japan", "Luxembourg",
"Netherlands", "Switzerland"))
cdat
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
p <- ggplot(cdat, aes(x=healthexp, y=infmortality, size=GDP)) +
geom_point(shape=21, colour="black", fill="cornsilk")
# GDP mapped to radius (default with scale_size_continuous)
p
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
p <- ggplot(cdat, aes(x=healthexp, y=infmortality, size=GDP)) +
geom_point(shape=21, colour="black", fill="cornsilk")
# GDP mapped to radius (default with scale_size_continuous)
p
# GDP mapped to area instead, and larger circles
g<-p + scale_size_area(max_size=15)
g
grid.arrange(p,g,ncol=2)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
# Add up counts for male and female
hec <- HairEyeColor[,,"Male"] + HairEyeColor[,,"Female"]
# Convert to long format
library(reshape2)
hec <- melt(hec, value.name="count")
ggplot(hec, aes(x=Eye, y=Hair)) +
geom_point(aes(size=count), shape=21, colour="black", fill="cornsilk") +
scale_size_area(max_size=20, guide=FALSE) +
geom_text(aes(y=as.numeric(Hair)-sqrt(count)/22, label=count), vjust=1,
colour="grey60", size=4)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
c2009 <- subset(countries, Year==2009,
select=c(Name, GDP, laborrate, healthexp, infmortality))
c2009
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
c2009 <- subset(countries, Year==2009,
select=c(Name, GDP, laborrate, healthexp, infmortality))
c2009
pairs(c2009[,2:5])
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
pairs(c2009[,2:5], upper.panel = panel.cor,
diag.panel = panel.hist,
lower.panel = panel.smooth)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}
pairs(c2009[,2:5], upper.panel = panel.cor,
diag.panel = panel.hist,
lower.panel = panel.smooth)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}
panel.hist <- function(x, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks
nB <- length(breaks)
y <- h$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="white", ...)
}
pairs(c2009[,2:5], upper.panel = panel.cor,
diag.panel = panel.hist,
lower.panel = panel.smooth)
library(gcookbook) # For the data set
library(ggplot2)
library(dplyr)
library(gridExtra)
library(plotly)
library(hexbin)
data(countries)
panel.lm <- function (x, y, col = par("col"), bg = NA, pch = par("pch"),
cex = 1, col.smooth = "black", ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(stats::lm(y ~ x), col = col.smooth, ...)
}
pairs(c2009[,2:5], pch=".",
upper.panel = panel.cor,
diag.panel = panel.hist,
lower.panel = panel.lm)
